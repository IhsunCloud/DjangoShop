# Generated by Django 3.1.7 on 2021-02-24 18:18

from django.db import migrations, models
import django.db.models.deletion
import mptt.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(null=True, unique=True, verbose_name='Slug')),
                ('status', models.BooleanField(default=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='shop.category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'unique_together': {('parent', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(max_length=50, null=True, verbose_name='Fullname')),
                ('text', models.TextField(max_length=256, null=True, verbose_name='Comment Text')),
                ('rating', models.IntegerField(default=0, null=True, verbose_name='Rating')),
                ('active', models.BooleanField(default=False, null=True, verbose_name='Comment Activity')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': ('Comment',),
                'verbose_name_plural': ('Comments',),
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='product_images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, null=True, verbose_name='Title')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('description', models.TextField(max_length=128, null=True, verbose_name='Description')),
                ('color', models.CharField(max_length=64, verbose_name='Color')),
                ('status', models.CharField(choices=[('D', 'DRAFT'), ('P', 'PUBLISHED')], max_length=1, null=True, verbose_name='Status')),
                ('availability', models.CharField(choices=[('A', 'Available'), ('N', 'NotAvailable'), ('S', 'Soon')], default='A', max_length=1, null=True, verbose_name='Availability')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Product Created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Product Modified')),
                ('category', mptt.fields.TreeForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.category', verbose_name='Category')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.comment', verbose_name='Comment')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.image')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Products',
                'verbose_name_plural': 'Products',
            },
        ),
    ]
